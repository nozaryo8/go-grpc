// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/demo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestClient interface {
	// 通常のRPC
	Unary(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	// サーバーストリーミングRPC
	ServerStreaming(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (Test_ServerStreamingClient, error)
	AStreaming(ctx context.Context, in *ARequest, opts ...grpc.CallOption) (Test_AStreamingClient, error)
	// クライアントストリーミングRPC
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (Test_ClientStreamingClient, error)
	// 双方向ストリーミングRPC
	BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (Test_BidirectionalStreamingClient, error)
}

type testClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClient(cc grpc.ClientConnInterface) TestClient {
	return &testClient{cc}
}

func (c *testClient) Unary(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/demo.Test/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) ServerStreaming(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (Test_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[0], "/demo.Test/ServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_ServerStreamingClient interface {
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type testServerStreamingClient struct {
	grpc.ClientStream
}

func (x *testServerStreamingClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) AStreaming(ctx context.Context, in *ARequest, opts ...grpc.CallOption) (Test_AStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[1], "/demo.Test/AStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &testAStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_AStreamingClient interface {
	Recv() (*AResponse, error)
	grpc.ClientStream
}

type testAStreamingClient struct {
	grpc.ClientStream
}

func (x *testAStreamingClient) Recv() (*AResponse, error) {
	m := new(AResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (Test_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[2], "/demo.Test/ClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &testClientStreamingClient{stream}
	return x, nil
}

type Test_ClientStreamingClient interface {
	Send(*TestRequest) error
	CloseAndRecv() (*TestResponse, error)
	grpc.ClientStream
}

type testClientStreamingClient struct {
	grpc.ClientStream
}

func (x *testClientStreamingClient) Send(m *TestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testClientStreamingClient) CloseAndRecv() (*TestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (Test_BidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[3], "/demo.Test/BidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &testBidirectionalStreamingClient{stream}
	return x, nil
}

type Test_BidirectionalStreamingClient interface {
	Send(*TestRequest) error
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type testBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *testBidirectionalStreamingClient) Send(m *TestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testBidirectionalStreamingClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServer is the server API for Test service.
// All implementations must embed UnimplementedTestServer
// for forward compatibility
type TestServer interface {
	// 通常のRPC
	Unary(context.Context, *TestRequest) (*TestResponse, error)
	// サーバーストリーミングRPC
	ServerStreaming(*TestRequest, Test_ServerStreamingServer) error
	AStreaming(*ARequest, Test_AStreamingServer) error
	// クライアントストリーミングRPC
	ClientStreaming(Test_ClientStreamingServer) error
	// 双方向ストリーミングRPC
	BidirectionalStreaming(Test_BidirectionalStreamingServer) error
	mustEmbedUnimplementedTestServer()
}

// UnimplementedTestServer must be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (UnimplementedTestServer) Unary(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedTestServer) ServerStreaming(*TestRequest, Test_ServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}
func (UnimplementedTestServer) AStreaming(*ARequest, Test_AStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method AStreaming not implemented")
}
func (UnimplementedTestServer) ClientStreaming(Test_ClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreaming not implemented")
}
func (UnimplementedTestServer) BidirectionalStreaming(Test_BidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreaming not implemented")
}
func (UnimplementedTestServer) mustEmbedUnimplementedTestServer() {}

// UnsafeTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServer will
// result in compilation errors.
type UnsafeTestServer interface {
	mustEmbedUnimplementedTestServer()
}

func RegisterTestServer(s grpc.ServiceRegistrar, srv TestServer) {
	s.RegisterService(&Test_ServiceDesc, srv)
}

func _Test_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Test/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Unary(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).ServerStreaming(m, &testServerStreamingServer{stream})
}

type Test_ServerStreamingServer interface {
	Send(*TestResponse) error
	grpc.ServerStream
}

type testServerStreamingServer struct {
	grpc.ServerStream
}

func (x *testServerStreamingServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Test_AStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ARequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).AStreaming(m, &testAStreamingServer{stream})
}

type Test_AStreamingServer interface {
	Send(*AResponse) error
	grpc.ServerStream
}

type testAStreamingServer struct {
	grpc.ServerStream
}

func (x *testAStreamingServer) Send(m *AResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Test_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).ClientStreaming(&testClientStreamingServer{stream})
}

type Test_ClientStreamingServer interface {
	SendAndClose(*TestResponse) error
	Recv() (*TestRequest, error)
	grpc.ServerStream
}

type testClientStreamingServer struct {
	grpc.ServerStream
}

func (x *testClientStreamingServer) SendAndClose(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testClientStreamingServer) Recv() (*TestRequest, error) {
	m := new(TestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Test_BidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).BidirectionalStreaming(&testBidirectionalStreamingServer{stream})
}

type Test_BidirectionalStreamingServer interface {
	Send(*TestResponse) error
	Recv() (*TestRequest, error)
	grpc.ServerStream
}

type testBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *testBidirectionalStreamingServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testBidirectionalStreamingServer) Recv() (*TestRequest, error) {
	m := new(TestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Test_ServiceDesc is the grpc.ServiceDesc for Test service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _Test_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreaming",
			Handler:       _Test_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AStreaming",
			Handler:       _Test_AStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreaming",
			Handler:       _Test_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreaming",
			Handler:       _Test_BidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/demo.proto",
}
